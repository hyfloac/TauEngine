#pragma once

#include <dxgi.h>
#include "MathUtils.hpp"

struct Tex2DTest final
{
    u64 width;
    u32 height;
};

struct Tex3DTest final
{
    u64 width;
    u32 height;
    u16 depth;
};

static const Tex2DTest Texture2DTests[] = {
    { 1, 1 },
    { 1, 2 },
    { 2, 1 },
    { 2, 2 },
    { 17, 1 },
    { 17, 2 },
    { 17, 3 },
    { 17, 4 },
    { 1, 17 },
    { 2, 17 },
    { 3, 17 },
    { 4, 17 },
    { 125, 17 },
    { 126, 17 },
    { 127, 17 },
    { 128, 17 },
    { 129, 17 },
    { 130, 17 },
    { 131, 17 },
    { 132, 17 },
    { 17, 125 },
    { 17, 126 },
    { 17, 127 },
    { 17, 128 },
    { 17, 129 },
    { 17, 130 },
    { 17, 131 },
    { 17, 132 },
    { 125, 125 },
    { 126, 126 },
    { 127, 127 },
    { 128, 128 },
    { 129, 129 },
    { 130, 130 },
    { 131, 131 },
    { 132, 132 },
};

static const Tex3DTest Texture3DTests[] = {
    { 1, 1, 1 },
    { 1, 2, 1 },
    { 2, 1, 1 },
    { 2, 2, 1 },
    { 1, 1, 2 },
    { 1, 2, 2 },
    { 2, 1, 2 },
    { 2, 2, 2 },
    { 17, 1, 5 },
    { 17, 2, 5 },
    { 17, 3, 5 },
    { 17, 4, 5 },
    { 17, 1, 17 },
    { 17, 2, 17 },
    { 17, 3, 17 },
    { 17, 4, 17 },
    { 1, 17, 5 },
    { 2, 17, 5 },
    { 3, 17, 5 },
    { 4, 17, 5 },
    { 1, 17, 5 },
    { 2, 17, 5 },
    { 3, 17, 5 },
    { 4, 17, 5 },
    { 125, 17, 1 },
    { 126, 17, 1 },
    { 127, 17, 1 },
    { 128, 17, 1 },
    { 129, 17, 1 },
    { 130, 17, 1 },
    { 131, 17, 1 },
    { 132, 17, 1 },
    { 125, 17, 2 },
    { 126, 17, 2 },
    { 127, 17, 2 },
    { 128, 17, 2 },
    { 129, 17, 2 },
    { 130, 17, 2 },
    { 131, 17, 2 },
    { 132, 17, 2 },
    { 125, 17, 5 },
    { 126, 17, 5 },
    { 127, 17, 5 },
    { 128, 17, 5 },
    { 129, 17, 5 },
    { 130, 17, 5 },
    { 131, 17, 5 },
    { 132, 17, 5 },
    { 125, 17, 17 },
    { 126, 17, 17 },
    { 127, 17, 17 },
    { 128, 17, 17 },
    { 129, 17, 17 },
    { 130, 17, 17 },
    { 131, 17, 17 },
    { 132, 17, 17 },
    { 125, 17, 127 },
    { 126, 17, 127 },
    { 127, 17, 127 },
    { 128, 17, 127 },
    { 129, 17, 127 },
    { 130, 17, 127 },
    { 131, 17, 127 },
    { 132, 17, 127 },
    { 125, 17, 128 },
    { 126, 17, 128 },
    { 127, 17, 128 },
    { 128, 17, 128 },
    { 129, 17, 128 },
    { 130, 17, 128 },
    { 131, 17, 128 },
    { 132, 17, 128 },
    { 125, 17, 129 },
    { 126, 17, 129 },
    { 127, 17, 129 },
    { 128, 17, 129 },
    { 129, 17, 129 },
    { 130, 17, 129 },
    { 131, 17, 129 },
    { 132, 17, 129 },
    { 17, 125, 1 },
    { 17, 126, 1 },
    { 17, 127, 1 },
    { 17, 128, 1 },
    { 17, 129, 1 },
    { 17, 130, 1 },
    { 17, 131, 1 },
    { 17, 132, 1 },
    { 17, 125, 2 },
    { 17, 126, 2 },
    { 17, 127, 2 },
    { 17, 128, 2 },
    { 17, 129, 2 },
    { 17, 130, 2 },
    { 17, 131, 2 },
    { 17, 132, 2 },
    { 17, 125, 1 },
    { 17, 126, 5 },
    { 17, 127, 5 },
    { 17, 128, 5 },
    { 17, 129, 5 },
    { 17, 130, 5 },
    { 17, 131, 5 },
    { 17, 132, 5 },
    { 17, 125, 17 },
    { 17, 126, 17 },
    { 17, 127, 17 },
    { 17, 128, 17 },
    { 17, 129, 17 },
    { 17, 130, 17 },
    { 17, 131, 17 },
    { 17, 132, 17 },
    { 17, 125, 127 },
    { 17, 126, 127 },
    { 17, 127, 127 },
    { 17, 128, 127 },
    { 17, 129, 127 },
    { 17, 130, 127 },
    { 17, 131, 127 },
    { 17, 132, 127 },
    { 17, 125, 128 },
    { 17, 126, 128 },
    { 17, 127, 128 },
    { 17, 128, 128 },
    { 17, 129, 128 },
    { 17, 130, 128 },
    { 17, 131, 128 },
    { 17, 132, 128 },
    { 17, 125, 17 },
    { 17, 126, 129 },
    { 17, 127, 129 },
    { 17, 128, 129 },
    { 17, 129, 129 },
    { 17, 130, 129 },
    { 17, 131, 129 },
    { 17, 132, 129 },
    { 125, 125, 1 },
    { 126, 126, 1 },
    { 127, 127, 1 },
    { 128, 128, 1 },
    { 129, 129, 1 },
    { 130, 130, 1 },
    { 131, 131, 1 },
    { 132, 132, 1 },
    { 125, 125, 2 },
    { 126, 126, 2 },
    { 127, 127, 2 },
    { 128, 128, 2 },
    { 129, 129, 2 },
    { 130, 130, 2 },
    { 131, 131, 2 },
    { 132, 132, 2 },
    { 125, 125, 5 },
    { 126, 126, 5 },
    { 127, 127, 5 },
    { 128, 128, 5 },
    { 129, 129, 5 },
    { 130, 130, 5 },
    { 131, 131, 5 },
    { 132, 132, 5 },
    { 125, 125, 17 },
    { 126, 126, 17 },
    { 127, 127, 17 },
    { 128, 128, 17 },
    { 129, 129, 17 },
    { 130, 130, 17 },
    { 131, 131, 17 },
    { 132, 132, 17 },
    { 125, 125, 127 },
    { 126, 126, 127 },
    { 127, 127, 127 },
    { 128, 128, 127 },
    { 129, 129, 127 },
    { 130, 130, 127 },
    { 131, 131, 127 },
    { 132, 132, 127 },
    { 125, 125, 128 },
    { 126, 126, 128 },
    { 127, 127, 128 },
    { 128, 128, 128 },
    { 129, 129, 128 },
    { 130, 130, 128 },
    { 131, 131, 128 },
    { 132, 132, 128 },
    { 125, 125, 129 },
    { 126, 126, 129 },
    { 127, 127, 129 },
    { 128, 128, 129 },
    { 129, 129, 129 },
    { 130, 130, 129 },
    { 131, 131, 129 },
    { 132, 132, 129 },
};

// static const DXGI_FORMAT TestFormats[] = {
//     DXGI_FORMAT_R32G32B32A32_FLOAT,
//     DXGI_FORMAT_R32G32B32A32_UINT,
//     DXGI_FORMAT_R32G32B32A32_SINT,
//     DXGI_FORMAT_R32G32B32_FLOAT,
//     DXGI_FORMAT_R32G32B32_UINT,
//     DXGI_FORMAT_R32G32B32_SINT,
//     DXGI_FORMAT_R16G16B16A16_FLOAT,
//     DXGI_FORMAT_R16G16B16A16_UNORM,
//     DXGI_FORMAT_R16G16B16A16_UINT,
//     DXGI_FORMAT_R16G16B16A16_SNORM,
//     DXGI_FORMAT_R16G16B16A16_SINT,
//     DXGI_FORMAT_R32G32_FLOAT,
//     DXGI_FORMAT_R32G32_UINT,
//     DXGI_FORMAT_R32G32_SINT,
//     DXGI_FORMAT_D32_FLOAT_S8X24_UINT,
//     DXGI_FORMAT_R10G10B10A2_UNORM,
//     DXGI_FORMAT_R10G10B10A2_UINT,
//     DXGI_FORMAT_R11G11B10_FLOAT,
//     DXGI_FORMAT_R8G8B8A8_UNORM,
//     DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
//     DXGI_FORMAT_R8G8B8A8_UINT,
//     DXGI_FORMAT_R8G8B8A8_SNORM,
//     DXGI_FORMAT_R8G8B8A8_SINT,
//     DXGI_FORMAT_R16G16_FLOAT,
//     DXGI_FORMAT_R16G16_UNORM,
//     DXGI_FORMAT_R16G16_UINT,
//     DXGI_FORMAT_R16G16_SNORM,
//     DXGI_FORMAT_R16G16_SINT,
//     DXGI_FORMAT_D32_FLOAT,
//     DXGI_FORMAT_R32_FLOAT,
//     DXGI_FORMAT_R32_UINT, 
//     DXGI_FORMAT_R32_SINT,
//     DXGI_FORMAT_D24_UNORM_S8_UINT,
//     DXGI_FORMAT_R8G8_UNORM,
//     DXGI_FORMAT_R8G8_UINT, 
//     DXGI_FORMAT_R8G8_SNORM,
//     DXGI_FORMAT_R8G8_SINT,
//     DXGI_FORMAT_R16_FLOAT,
//     DXGI_FORMAT_D16_UNORM,
//     DXGI_FORMAT_R16_UNORM,
//     DXGI_FORMAT_R16_UINT, 
//     DXGI_FORMAT_R16_SNORM,
//     DXGI_FORMAT_R16_SINT,
//     DXGI_FORMAT_R8_UNORM,
//     DXGI_FORMAT_R8_UINT, 
//     DXGI_FORMAT_R8_SNORM,
//     DXGI_FORMAT_R8_SINT, 
//     DXGI_FORMAT_A8_UNORM,
//     DXGI_FORMAT_R1_UNORM,
//     DXGI_FORMAT_R8G8_B8G8_UNORM,
//     DXGI_FORMAT_G8R8_G8B8_UNORM,
//     DXGI_FORMAT_BC1_UNORM,
//     DXGI_FORMAT_BC1_UNORM_SRGB,
//     DXGI_FORMAT_BC2_UNORM,
//     DXGI_FORMAT_BC2_UNORM_SRGB,
//     DXGI_FORMAT_BC3_UNORM,
//     DXGI_FORMAT_BC3_UNORM_SRGB,
//     DXGI_FORMAT_BC4_UNORM,
//     DXGI_FORMAT_BC4_SNORM,
//     DXGI_FORMAT_BC5_UNORM,
//     DXGI_FORMAT_BC5_SNORM,
//     DXGI_FORMAT_B5G6R5_UNORM,  
//     DXGI_FORMAT_B5G5R5A1_UNORM,
//     DXGI_FORMAT_B8G8R8A8_UNORM,
//     DXGI_FORMAT_B8G8R8X8_UNORM,
//     DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,
//     DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,
//     DXGI_FORMAT_BC6H_UF16,
//     DXGI_FORMAT_BC6H_SF16,
//     DXGI_FORMAT_BC7_UNORM,
//     DXGI_FORMAT_BC7_UNORM_SRGB
// };

static const DXGI_FORMAT TestFormats[] = {
    DXGI_FORMAT_R32G32B32A32_TYPELESS,
    DXGI_FORMAT_R32G32B32_TYPELESS,
    DXGI_FORMAT_R16G16B16A16_TYPELESS,
    DXGI_FORMAT_R32G32_TYPELESS,
    DXGI_FORMAT_R32G8X24_TYPELESS,
    DXGI_FORMAT_R10G10B10A2_TYPELESS,
    DXGI_FORMAT_R11G11B10_FLOAT,
    DXGI_FORMAT_R8G8B8A8_TYPELESS,
    DXGI_FORMAT_R16G16_TYPELESS,
    DXGI_FORMAT_R32_TYPELESS,
    DXGI_FORMAT_R24G8_TYPELESS,
    DXGI_FORMAT_R8G8_TYPELESS,
    DXGI_FORMAT_R16_TYPELESS,
    DXGI_FORMAT_R8_TYPELESS,
    DXGI_FORMAT_BC1_TYPELESS,
    DXGI_FORMAT_BC2_TYPELESS,
    DXGI_FORMAT_BC3_TYPELESS,
    DXGI_FORMAT_BC4_TYPELESS,
    DXGI_FORMAT_BC5_TYPELESS,
    DXGI_FORMAT_B5G6R5_UNORM,  
    DXGI_FORMAT_B5G5R5A1_UNORM,
    DXGI_FORMAT_B8G8R8A8_TYPELESS,
    DXGI_FORMAT_BC6H_TYPELESS,
    DXGI_FORMAT_BC7_TYPELESS,
};

static constexpr uSys Texture2DTestCount = sizeof(Texture2DTests) / sizeof(Texture2DTests[0]);
static constexpr uSys Texture3DTestCount = sizeof(Texture3DTests) / sizeof(Texture3DTests[0]);
static constexpr uSys TestFormatCount = sizeof(TestFormats) / sizeof(TestFormats[0]);
